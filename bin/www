#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('node_gw:server');
let http = require('http');
let cluster = require('cluster');
let numCPUs = require('os').cpus().length;
numCPUs=numCPUs>2?2:numCPUs;

//判断进程是否工作
if(cluster.isMaster){
    console.log('[master] ' + "start master...");
    for (let i = 0; i < numCPUs; i++) {
        //根据CPU通道 开启进程
        cluster.fork();
    }
    //为cluster绑定listening事件
    cluster.on('listening', function (worker, address) {
        console.log('[master] ' + 'listening: worker' + worker.id + ',pid:' +
            worker.process.pid + ', Address:' + address.address + ":" + address.port);

    });

    cluster.on('exit', (worker, code, signal) => {
        console.log('worker %d died (%s). restarting...', worker.process.pid, signal || code);
    cluster.fork();
});

    cluster.on('disconnect', (worker) => {
        console.log(`The worker #${worker.id} has disconnected`);
});
}else {
    //进程已启动 开启http服务
    console.log('[worker] ' + "start worker ..." + cluster.worker.id);

    /**
     * Get port from environment and store in Express.
     */
    let port = normalizePort(process.env.PORT || 8180);
    app.set('port', port);

    /**
     * Create HTTP server.
     */
    let server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */
    function normalizePort(val) {
        let port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }
        if (port >= 0) {
            // port number
            return port;
        }
        return false;
    }
    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        let bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */
    function onListening() {
        let addr = server.address();
        let bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
}
